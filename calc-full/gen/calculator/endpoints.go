// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator endpoints
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package calculator

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "calculator" service endpoints.
type Endpoints struct {
	Add      goa.Endpoint
	Subtract goa.Endpoint
	Multiply goa.Endpoint
	Divide   goa.Endpoint
}

// NewEndpoints wraps the methods of the "calculator" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Add:      NewAddEndpoint(s),
		Subtract: NewSubtractEndpoint(s),
		Multiply: NewMultiplyEndpoint(s),
		Divide:   NewDivideEndpoint(s),
	}
}

// Use applies the given middleware to all the "calculator" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Add = m(e.Add)
	e.Subtract = m(e.Subtract)
	e.Multiply = m(e.Multiply)
	e.Divide = m(e.Divide)
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "calculator".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*AdditionPayload)
		return s.Add(ctx, p)
	}
}

// NewSubtractEndpoint returns an endpoint function that calls the method
// "subtract" of service "calculator".
func NewSubtractEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SubtractionPayload)
		return s.Subtract(ctx, p)
	}
}

// NewMultiplyEndpoint returns an endpoint function that calls the method
// "multiply" of service "calculator".
func NewMultiplyEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MultiplicationPayload)
		return s.Multiply(ctx, p)
	}
}

// NewDivideEndpoint returns an endpoint function that calls the method
// "divide" of service "calculator".
func NewDivideEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DivisionPayload)
		return s.Divide(ctx, p)
	}
}
