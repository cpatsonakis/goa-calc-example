// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator service
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package calculator

import (
	"context"
)

// The calculator service performs legendary mathematical operations on
// integers.
type Service interface {
	// Addition of two integers.
	Add(context.Context, *AdditionPayload) (res string, err error)
	// Subtraction of two numbers.
	Subtract(context.Context, *SubtractionPayload) (res string, err error)
	// Multiplication of two numbers.
	Multiply(context.Context, *MultiplicationPayload) (res string, err error)
	// Division of two numbers.
	Divide(context.Context, *DivisionPayload) (res *DivisionResult, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "calculator"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"add", "subtract", "multiply", "divide"}

// AdditionPayload is the payload type of the calculator service add method.
type AdditionPayload struct {
	// First operand of addition payload
	A int64
	// Second operand of addition payload
	B int64
}

// DivisionPayload is the payload type of the calculator service divide method.
type DivisionPayload struct {
	// First operand (nominator) of division payload
	A int64
	// Second operand (denominator) of division payload
	B int64
}

// DivisionResult is the result type of the calculator service divide method.
type DivisionResult struct {
	// Integer division quotient
	Q int64
	// Integer division remainder
	R int64
}

type ErrorResultType struct {
	// Name of the error.
	Name string
	// Descriptive error message.
	Message string
	// Timestamp of error's occurence.
	OccuredAt string
}

// MultiplicationPayload is the payload type of the calculator service multiply
// method.
type MultiplicationPayload struct {
	// First operand of multiplication payload
	A int64
	// Second operand of multiplication payload
	B int64
}

// SubtractionPayload is the payload type of the calculator service subtract
// method.
type SubtractionPayload struct {
	// First operand of subtraction payload
	A int64
	// Second operand of subtraction payload
	B int64
}

// Error returns an error description.
func (e *ErrorResultType) Error() string {
	return ""
}

// ErrorName returns "ErrorResultType".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *ErrorResultType) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "ErrorResultType".
func (e *ErrorResultType) GoaErrorName() string {
	return e.Name
}
