// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator client
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package calculator

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "calculator" service client.
type Client struct {
	AddEndpoint      goa.Endpoint
	SubtractEndpoint goa.Endpoint
	MultiplyEndpoint goa.Endpoint
	DivideEndpoint   goa.Endpoint
}

// NewClient initializes a "calculator" service client given the endpoints.
func NewClient(add, subtract, multiply, divide goa.Endpoint) *Client {
	return &Client{
		AddEndpoint:      add,
		SubtractEndpoint: subtract,
		MultiplyEndpoint: multiply,
		DivideEndpoint:   divide,
	}
}

// Add calls the "add" endpoint of the "calculator" service.
// Add may return the following errors:
//   - "internal_server_error" (type *ErrorResultType)
//   - "bad_request" (type *ErrorResultType)
//   - error: internal error
func (c *Client) Add(ctx context.Context, p *AdditionPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.AddEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Subtract calls the "subtract" endpoint of the "calculator" service.
// Subtract may return the following errors:
//   - "internal_server_error" (type *ErrorResultType)
//   - "bad_request" (type *ErrorResultType)
//   - error: internal error
func (c *Client) Subtract(ctx context.Context, p *SubtractionPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.SubtractEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Multiply calls the "multiply" endpoint of the "calculator" service.
// Multiply may return the following errors:
//   - "internal_server_error" (type *ErrorResultType)
//   - "bad_request" (type *ErrorResultType)
//   - error: internal error
func (c *Client) Multiply(ctx context.Context, p *MultiplicationPayload) (res string, err error) {
	var ires interface{}
	ires, err = c.MultiplyEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(string), nil
}

// Divide calls the "divide" endpoint of the "calculator" service.
// Divide may return the following errors:
//   - "internal_server_error" (type *ErrorResultType)
//   - "bad_request" (type *ErrorResultType)
//   - error: internal error
func (c *Client) Divide(ctx context.Context, p *DivisionPayload) (res *DivisionResult, err error) {
	var ires interface{}
	ires, err = c.DivideEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DivisionResult), nil
}
