// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	calculator "github.com/cpatsonakis/goa-calc-example/calc-full/gen/calculator"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "calculator" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int64
		b int64
	)
	{
		p, ok := v.(*calculator.AdditionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calculator", "add", "*calculator.AdditionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddCalculatorPath(a, b)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calculator", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeAddResponse returns a decoder for responses returned by the calculator
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//   - "internal_server_error" (type *calculator.ErrorResultType): http.StatusInternalServerError
//   - "bad_request" (type *calculator.ErrorResultType): http.StatusBadRequest
//   - error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "add", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			var (
				body AddInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "add", err)
			}
			err = ValidateAddInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "add", err)
			}
			return nil, NewAddInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body AddBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "add", err)
			}
			err = ValidateAddBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "add", err)
			}
			return nil, NewAddBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calculator", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildSubtractRequest instantiates a HTTP request object with method and path
// set to call the "calculator" service "subtract" endpoint
func (c *Client) BuildSubtractRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int64
		b int64
	)
	{
		p, ok := v.(*calculator.SubtractionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calculator", "subtract", "*calculator.SubtractionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SubtractCalculatorPath(a, b)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calculator", "subtract", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeSubtractResponse returns a decoder for responses returned by the
// calculator subtract endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeSubtractResponse may return the following errors:
//   - "internal_server_error" (type *calculator.ErrorResultType): http.StatusInternalServerError
//   - "bad_request" (type *calculator.ErrorResultType): http.StatusBadRequest
//   - error: internal error
func DecodeSubtractResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "subtract", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			var (
				body SubtractInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "subtract", err)
			}
			err = ValidateSubtractInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "subtract", err)
			}
			return nil, NewSubtractInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body SubtractBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "subtract", err)
			}
			err = ValidateSubtractBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "subtract", err)
			}
			return nil, NewSubtractBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calculator", "subtract", resp.StatusCode, string(body))
		}
	}
}

// BuildMultiplyRequest instantiates a HTTP request object with method and path
// set to call the "calculator" service "multiply" endpoint
func (c *Client) BuildMultiplyRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int64
		b int64
	)
	{
		p, ok := v.(*calculator.MultiplicationPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calculator", "multiply", "*calculator.MultiplicationPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MultiplyCalculatorPath(a, b)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calculator", "multiply", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeMultiplyResponse returns a decoder for responses returned by the
// calculator multiply endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeMultiplyResponse may return the following errors:
//   - "internal_server_error" (type *calculator.ErrorResultType): http.StatusInternalServerError
//   - "bad_request" (type *calculator.ErrorResultType): http.StatusBadRequest
//   - error: internal error
func DecodeMultiplyResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "multiply", err)
			}
			return body, nil
		case http.StatusInternalServerError:
			var (
				body MultiplyInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "multiply", err)
			}
			err = ValidateMultiplyInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "multiply", err)
			}
			return nil, NewMultiplyInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body MultiplyBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "multiply", err)
			}
			err = ValidateMultiplyBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "multiply", err)
			}
			return nil, NewMultiplyBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calculator", "multiply", resp.StatusCode, string(body))
		}
	}
}

// BuildDivideRequest instantiates a HTTP request object with method and path
// set to call the "calculator" service "divide" endpoint
func (c *Client) BuildDivideRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		a int64
		b int64
	)
	{
		p, ok := v.(*calculator.DivisionPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("calculator", "divide", "*calculator.DivisionPayload", v)
		}
		a = p.A
		b = p.B
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DivideCalculatorPath(a, b)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("calculator", "divide", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDivideResponse returns a decoder for responses returned by the
// calculator divide endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDivideResponse may return the following errors:
//   - "internal_server_error" (type *calculator.ErrorResultType): http.StatusInternalServerError
//   - "bad_request" (type *calculator.ErrorResultType): http.StatusBadRequest
//   - error: internal error
func DecodeDivideResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DivideResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "divide", err)
			}
			err = ValidateDivideResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "divide", err)
			}
			res := NewDivideDivisionResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body DivideInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "divide", err)
			}
			err = ValidateDivideInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "divide", err)
			}
			return nil, NewDivideInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body DivideBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("calculator", "divide", err)
			}
			err = ValidateDivideBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("calculator", "divide", err)
			}
			return nil, NewDivideBadRequest(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("calculator", "divide", resp.StatusCode, string(body))
		}
	}
}
