// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator HTTP client types
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package client

import (
	calculator "github.com/cpatsonakis/goa-calc-example/calc-full/gen/calculator"
	goa "goa.design/goa/v3/pkg"
)

// DivideResponseBody is the type of the "calculator" service "divide" endpoint
// HTTP response body.
type DivideResponseBody struct {
	// Integer division quotient
	Q *int64 `form:"q,omitempty" json:"q,omitempty" xml:"q,omitempty"`
	// Integer division remainder
	R *int64 `form:"r,omitempty" json:"r,omitempty" xml:"r,omitempty"`
}

// AddInternalServerErrorResponseBody is the type of the "calculator" service
// "add" endpoint HTTP response body for the "internal_server_error" error.
type AddInternalServerErrorResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// AddBadRequestResponseBody is the type of the "calculator" service "add"
// endpoint HTTP response body for the "bad_request" error.
type AddBadRequestResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// SubtractInternalServerErrorResponseBody is the type of the "calculator"
// service "subtract" endpoint HTTP response body for the
// "internal_server_error" error.
type SubtractInternalServerErrorResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// SubtractBadRequestResponseBody is the type of the "calculator" service
// "subtract" endpoint HTTP response body for the "bad_request" error.
type SubtractBadRequestResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// MultiplyInternalServerErrorResponseBody is the type of the "calculator"
// service "multiply" endpoint HTTP response body for the
// "internal_server_error" error.
type MultiplyInternalServerErrorResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// MultiplyBadRequestResponseBody is the type of the "calculator" service
// "multiply" endpoint HTTP response body for the "bad_request" error.
type MultiplyBadRequestResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// DivideInternalServerErrorResponseBody is the type of the "calculator"
// service "divide" endpoint HTTP response body for the "internal_server_error"
// error.
type DivideInternalServerErrorResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// DivideBadRequestResponseBody is the type of the "calculator" service
// "divide" endpoint HTTP response body for the "bad_request" error.
type DivideBadRequestResponseBody struct {
	// Name of the error.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Descriptive error message.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Timestamp of error's occurence.
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// NewAddInternalServerError builds a calculator service add endpoint
// internal_server_error error.
func NewAddInternalServerError(body *AddInternalServerErrorResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewAddBadRequest builds a calculator service add endpoint bad_request error.
func NewAddBadRequest(body *AddBadRequestResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewSubtractInternalServerError builds a calculator service subtract endpoint
// internal_server_error error.
func NewSubtractInternalServerError(body *SubtractInternalServerErrorResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewSubtractBadRequest builds a calculator service subtract endpoint
// bad_request error.
func NewSubtractBadRequest(body *SubtractBadRequestResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewMultiplyInternalServerError builds a calculator service multiply endpoint
// internal_server_error error.
func NewMultiplyInternalServerError(body *MultiplyInternalServerErrorResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewMultiplyBadRequest builds a calculator service multiply endpoint
// bad_request error.
func NewMultiplyBadRequest(body *MultiplyBadRequestResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewDivideDivisionResultOK builds a "calculator" service "divide" endpoint
// result from a HTTP "OK" response.
func NewDivideDivisionResultOK(body *DivideResponseBody) *calculator.DivisionResult {
	v := &calculator.DivisionResult{
		Q: *body.Q,
		R: *body.R,
	}

	return v
}

// NewDivideInternalServerError builds a calculator service divide endpoint
// internal_server_error error.
func NewDivideInternalServerError(body *DivideInternalServerErrorResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewDivideBadRequest builds a calculator service divide endpoint bad_request
// error.
func NewDivideBadRequest(body *DivideBadRequestResponseBody) *calculator.ErrorResultType {
	v := &calculator.ErrorResultType{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// ValidateDivideResponseBody runs the validations defined on DivideResponseBody
func ValidateDivideResponseBody(body *DivideResponseBody) (err error) {
	if body.Q == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("q", "body"))
	}
	if body.R == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("r", "body"))
	}
	return
}

// ValidateAddInternalServerErrorResponseBody runs the validations defined on
// add_internal_server_error_response_body
func ValidateAddInternalServerErrorResponseBody(body *AddInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateAddBadRequestResponseBody runs the validations defined on
// add_bad_request_response_body
func ValidateAddBadRequestResponseBody(body *AddBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateSubtractInternalServerErrorResponseBody runs the validations defined
// on subtract_internal_server_error_response_body
func ValidateSubtractInternalServerErrorResponseBody(body *SubtractInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateSubtractBadRequestResponseBody runs the validations defined on
// subtract_bad_request_response_body
func ValidateSubtractBadRequestResponseBody(body *SubtractBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateMultiplyInternalServerErrorResponseBody runs the validations defined
// on multiply_internal_server_error_response_body
func ValidateMultiplyInternalServerErrorResponseBody(body *MultiplyInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateMultiplyBadRequestResponseBody runs the validations defined on
// multiply_bad_request_response_body
func ValidateMultiplyBadRequestResponseBody(body *MultiplyBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateDivideInternalServerErrorResponseBody runs the validations defined
// on divide_internal_server_error_response_body
func ValidateDivideInternalServerErrorResponseBody(body *DivideInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}

// ValidateDivideBadRequestResponseBody runs the validations defined on
// divide_bad_request_response_body
func ValidateDivideBadRequestResponseBody(body *DivideBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.Name != nil {
		if !(*body.Name == "bad_request" || *body.Name == "internal_error") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.name", *body.Name, []interface{}{"bad_request", "internal_error"}))
		}
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}
