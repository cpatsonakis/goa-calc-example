// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calculator HTTP server types
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/calc-full -o
// calc-full

package server

import (
	calculator "github.com/cpatsonakis/goa-calc-example/calc-full/gen/calculator"
)

// DivideResponseBody is the type of the "calculator" service "divide" endpoint
// HTTP response body.
type DivideResponseBody struct {
	// Integer division quotient
	Q int64 `form:"q" json:"q" xml:"q"`
	// Integer division remainder
	R int64 `form:"r" json:"r" xml:"r"`
}

// AddInternalServerErrorResponseBody is the type of the "calculator" service
// "add" endpoint HTTP response body for the "internal_server_error" error.
type AddInternalServerErrorResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// AddBadRequestResponseBody is the type of the "calculator" service "add"
// endpoint HTTP response body for the "bad_request" error.
type AddBadRequestResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// SubtractInternalServerErrorResponseBody is the type of the "calculator"
// service "subtract" endpoint HTTP response body for the
// "internal_server_error" error.
type SubtractInternalServerErrorResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// SubtractBadRequestResponseBody is the type of the "calculator" service
// "subtract" endpoint HTTP response body for the "bad_request" error.
type SubtractBadRequestResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// MultiplyInternalServerErrorResponseBody is the type of the "calculator"
// service "multiply" endpoint HTTP response body for the
// "internal_server_error" error.
type MultiplyInternalServerErrorResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// MultiplyBadRequestResponseBody is the type of the "calculator" service
// "multiply" endpoint HTTP response body for the "bad_request" error.
type MultiplyBadRequestResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// DivideInternalServerErrorResponseBody is the type of the "calculator"
// service "divide" endpoint HTTP response body for the "internal_server_error"
// error.
type DivideInternalServerErrorResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// DivideBadRequestResponseBody is the type of the "calculator" service
// "divide" endpoint HTTP response body for the "bad_request" error.
type DivideBadRequestResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// NewDivideResponseBody builds the HTTP response body from the result of the
// "divide" endpoint of the "calculator" service.
func NewDivideResponseBody(res *calculator.DivisionResult) *DivideResponseBody {
	body := &DivideResponseBody{
		Q: res.Q,
		R: res.R,
	}
	return body
}

// NewAddInternalServerErrorResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "calculator" service.
func NewAddInternalServerErrorResponseBody(res *calculator.ErrorResultType) *AddInternalServerErrorResponseBody {
	body := &AddInternalServerErrorResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewAddBadRequestResponseBody builds the HTTP response body from the result
// of the "add" endpoint of the "calculator" service.
func NewAddBadRequestResponseBody(res *calculator.ErrorResultType) *AddBadRequestResponseBody {
	body := &AddBadRequestResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewSubtractInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "subtract" endpoint of the "calculator" service.
func NewSubtractInternalServerErrorResponseBody(res *calculator.ErrorResultType) *SubtractInternalServerErrorResponseBody {
	body := &SubtractInternalServerErrorResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewSubtractBadRequestResponseBody builds the HTTP response body from the
// result of the "subtract" endpoint of the "calculator" service.
func NewSubtractBadRequestResponseBody(res *calculator.ErrorResultType) *SubtractBadRequestResponseBody {
	body := &SubtractBadRequestResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewMultiplyInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "multiply" endpoint of the "calculator" service.
func NewMultiplyInternalServerErrorResponseBody(res *calculator.ErrorResultType) *MultiplyInternalServerErrorResponseBody {
	body := &MultiplyInternalServerErrorResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewMultiplyBadRequestResponseBody builds the HTTP response body from the
// result of the "multiply" endpoint of the "calculator" service.
func NewMultiplyBadRequestResponseBody(res *calculator.ErrorResultType) *MultiplyBadRequestResponseBody {
	body := &MultiplyBadRequestResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewDivideInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "divide" endpoint of the "calculator" service.
func NewDivideInternalServerErrorResponseBody(res *calculator.ErrorResultType) *DivideInternalServerErrorResponseBody {
	body := &DivideInternalServerErrorResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewDivideBadRequestResponseBody builds the HTTP response body from the
// result of the "divide" endpoint of the "calculator" service.
func NewDivideBadRequestResponseBody(res *calculator.ErrorResultType) *DivideBadRequestResponseBody {
	body := &DivideBadRequestResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewAdditionPayload builds a calculator service add endpoint payload.
func NewAdditionPayload(a int64, b int64) *calculator.AdditionPayload {
	v := &calculator.AdditionPayload{}
	v.A = a
	v.B = b

	return v
}

// NewSubtractionPayload builds a calculator service subtract endpoint payload.
func NewSubtractionPayload(a int64, b int64) *calculator.SubtractionPayload {
	v := &calculator.SubtractionPayload{}
	v.A = a
	v.B = b

	return v
}

// NewMultiplyMultiplicationPayload builds a calculator service multiply
// endpoint payload.
func NewMultiplyMultiplicationPayload(a int64, b int64) *calculator.MultiplicationPayload {
	v := &calculator.MultiplicationPayload{}
	v.A = a
	v.B = b

	return v
}

// NewDivideDivisionPayload builds a calculator service divide endpoint payload.
func NewDivideDivisionPayload(a int64, b int64) *calculator.DivisionPayload {
	v := &calculator.DivisionPayload{}
	v.A = a
	v.B = b

	return v
}
