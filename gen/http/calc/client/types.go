// Code generated by goa v3.8.5, DO NOT EDIT.
//
// calc HTTP client types
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/demo

package client

import (
	calc "github.com/cpatsonakis/goa-calc-example/gen/calc"
	goa "goa.design/goa/v3/pkg"
)

// MultiplyBadRequestResponseBody is the type of the "calc" service "multiply"
// endpoint HTTP response body for the "bad_request" error.
type MultiplyBadRequestResponseBody struct {
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Message   *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	OccuredAt *string `form:"occured_at,omitempty" json:"occured_at,omitempty" xml:"occured_at,omitempty"`
}

// NewMultiplyBadRequest builds a calc service multiply endpoint bad_request
// error.
func NewMultiplyBadRequest(body *MultiplyBadRequestResponseBody) *calc.BadRequestError {
	v := &calc.BadRequestError{
		Name:      *body.Name,
		Message:   *body.Message,
		OccuredAt: *body.OccuredAt,
	}

	return v
}

// NewMultiplyMulError builds a calc service multiply endpoint mul_error error.
func NewMultiplyMulError(body string) calc.StringError {
	v := calc.StringError(body)

	return v
}

// ValidateMultiplyBadRequestResponseBody runs the validations defined on
// multiply_bad_request_response_body
func ValidateMultiplyBadRequestResponseBody(body *MultiplyBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.OccuredAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("occured_at", "body"))
	}
	if body.OccuredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.occured_at", *body.OccuredAt, goa.FormatDateTime))
	}
	return
}
