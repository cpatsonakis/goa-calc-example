// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calc HTTP server types
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/goa-calc -o goa-calc

package server

import (
	calc "github.com/cpatsonakis/goa-calc-example/goa-calc/gen/calc"
)

// MultiplyInternalErrorResponseBody is the type of the "calc" service
// "multiply" endpoint HTTP response body for the "internal_error" error.
type MultiplyInternalErrorResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// MultiplyBadRequestResponseBody is the type of the "calc" service "multiply"
// endpoint HTTP response body for the "bad_request" error.
type MultiplyBadRequestResponseBody struct {
	// Name of the error.
	Name string `form:"name" json:"name" xml:"name"`
	// Descriptive error message.
	Message string `form:"message" json:"message" xml:"message"`
	// Timestamp of error's occurence.
	OccuredAt string `form:"occured_at" json:"occured_at" xml:"occured_at"`
}

// NewMultiplyInternalErrorResponseBody builds the HTTP response body from the
// result of the "multiply" endpoint of the "calc" service.
func NewMultiplyInternalErrorResponseBody(res *calc.ErrorResultType) *MultiplyInternalErrorResponseBody {
	body := &MultiplyInternalErrorResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewMultiplyBadRequestResponseBody builds the HTTP response body from the
// result of the "multiply" endpoint of the "calc" service.
func NewMultiplyBadRequestResponseBody(res *calc.ErrorResultType) *MultiplyBadRequestResponseBody {
	body := &MultiplyBadRequestResponseBody{
		Name:      res.Name,
		Message:   res.Message,
		OccuredAt: res.OccuredAt,
	}
	return body
}

// NewMultiplyMultiplicationPayload builds a calc service multiply endpoint
// payload.
func NewMultiplyMultiplicationPayload(a int64, b int64) *calc.MultiplicationPayload {
	v := &calc.MultiplicationPayload{}
	v.A = a
	v.B = b

	return v
}
