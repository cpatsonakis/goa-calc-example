// Code generated by goa v3.10.1, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen github.com/cpatsonakis/goa-calc-example/design/goa-calc -o goa-calc

package client

import (
	"fmt"
	"strconv"

	calc "github.com/cpatsonakis/goa-calc-example/goa-calc/gen/calc"
)

// BuildMultiplyPayload builds the payload for the calc multiply endpoint from
// CLI flags.
func BuildMultiplyPayload(calcMultiplyA string, calcMultiplyB string) (*calc.MultiplicationPayload, error) {
	var err error
	var a int64
	{
		a, err = strconv.ParseInt(calcMultiplyA, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT64")
		}
	}
	var b int64
	{
		b, err = strconv.ParseInt(calcMultiplyB, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT64")
		}
	}
	v := &calc.MultiplicationPayload{}
	v.A = a
	v.B = b

	return v, nil
}
