// var CustomErrorTypeRef = Type("CustomErrorTypeRef", ErrorResult, func() {
// 	// The "name" attribute is used to select the error response.
// 	// name should be set to either "internal_error" or "bad_request" by
// 	// the service method returning the error.
// 	Description("Describes the format and properties of an error returned due to a bad request ref.")
// 	// ErrorName("name", String, "Name of error.")
// 	// Attribute("message", String, "Message of error.")
// 	// Attribute("occurred_at", String, "Time error occurred.", func() {
// 	// 	Format(FormatDateTime)
// 	// })
// 	ErrorResult.Find("temporary").UserExamples = []*expr.ExampleExpr{
// 		{Summary: "asdfasdf",
// 			Description: "52t24",
// 			Value:       false,
// 		},
// 	}
// 	View("default", func() {
// 		Attribute("name")
// 		Attribute("message")
// 		Attribute("id")
// 		Attribute("timeout", func() {
// 			Example("default", "false")
// 		})
// 		Attribute("fault", func() {
// 			Example("default", "false")
// 		})
// 	})

// 	Required("name", "message", "id", "temporary", "timeout", "fault")
// })

	// Server("calc", func() {
	// 	// Host("localhost", func() {
	// 	// 	URI("http://localhost:8000")
	// 	// })
	// 	Host("default", func() {
	// 		URI("http://localhost:8000")
	// 	})
	// })

    		// Error("bad_request", StringError, func() {
		// 	Example("A stringified message describing why the request was rejected.")
		// })

		//Error("bad_request")
		// Error("bad_request", CustomErrorTypeRef, func() {
		// 	Meta("openapi:example", "false")
		// })

        			// Response("bad_request", StatusBadRequest, func() {
			// 	ContentType("text/plain")
			// })
	// Files("/openapi3.json", "./gen/http/openapi3.json", func() {
	// 	Description("JSON document containg the API's OpenAPI 3.0 definition.")
	// })
	// Files("/openapi.json", "./gen/http/openapi.json", func() {
	// 	Description("JSON document containg the API's OpenAPI 2.0 definition.")
	// })        
	    
// var CustomErrorType = Type("CustomError", func() {
// 	// The "name" attribute is used to select the error response.
// 	// name should be set to either "internal_error" or "bad_request" by
// 	// the service method returning the error.
// 	Description("Describes the format and properties of an error returned due to a bad request.")
// 	ErrorName("name", String, "Name of error.")
// 	Attribute("message", String, "Message of error.")
// 	Attribute("occurred_at", String, "Time error occurred.", func() {
// 		Format(FormatDateTime)
// 	})
// 	Required("name", "message", "occurred_at")
// })

var CustomErrorTypeRef = Type("CustomErrorTypeRef", ErrorResult, func() {
	Meta("openapi:example", "false")
	Required("name", "message", "id", "temporary", "timeout", "fault")
})	


// Multiply two integers a and b and get the result in the response's body.
func (s *calcsrvc) Multiply(ctx context.Context, p *calc.MultiplicationPayload) (res string, err error) {
	var (
		requestId string
		ok        bool
	)
	if requestId, ok = ctx.Value(middleware.RequestIDKey).(string); ok {

		return "", goa.Fault("Failed to extract requestId from context.")
	}
	s.logger.Printf("id=%s calc.multiply %v\n", requestId, *p)
	a := big.NewInt(p.A)
	b := big.NewInt(p.B)
	return a.Mul(a, b).String(), nil
}