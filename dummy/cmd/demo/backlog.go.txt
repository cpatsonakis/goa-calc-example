func mySillyErrorHandler(ctx context.Context, w http.ResponseWriter, err error) {
	// w.WriteHeader(http.StatusBadRequest)
	// bre := calc.BadRequestError {
	// 	Name: "kakouli request",
	// 	Message: err.Error(),
	// 	OccuredAt: time.Now().UTC().String(),
	// }
	// goahttp.ResponseEncoder(ctx)
	// w.Write(bre.)
	fmt.Println("MPAINEI STO XAZOULIKO ERROR HANDLER MOU")
}

type sillyStatUser struct {
	Name string `json:"name"`
}

func (s *sillyStatUser) StatusCode() int {
	return http.StatusBadRequest
}

func mySillyFormatter(err error) goahttp.Statuser {
	fmt.Println("MPAINEI STO XAZOULIKO FORMATTER MOU")
	fmt.Printf("Formatter Error: %s\n", err.Error())
	return &sillyStatUser{
		Name: "kati",
	}
	// return calc.BadRequestError{
	// 	Name:      "kati",
	// 	Message:   err.Error(),
	// 	OccuredAt: time.Now().UTC().String(),
	// }
}


func sillyEndpointMiddleware(ge goa.Endpoint) goa.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		// fmt.Printf("To context mesa sto endpoint middleware einai:\n%-v\n", ctx)
		// fmt.Printf("To request einai:\n%v\n", request)
		// var ok bool
		// var mp *calc.MultiplicationPayload
		// mp, ok = request.(*calc.MultiplicationPayload)
		// if !ok {
		// 	err := fmt.Errorf("type casting error")
		// 	fmt.Println(err.Error())
		// 	return nil, err
		// }
		// fmt.Printf("To mp einai %d kai %d\n", mp.A, mp.B)
		// return mp.A * mp.B, nil
		response, err := ge(ctx, request)
		if err != nil {
			fmt.Printf("To error einai: %s\n", err.Error())
		}
		fmt.Printf("To response einai: %v\n", response)
		return response, err
	}
}

//errhandler func(context.Context, http.ResponseWriter, error)

func swaggerUIStuff() {
	r := mux.NewRouter()

	sh := http.StripPrefix("/swaggerui/", http.FileServer(http.Dir("./static/swagger-ui")))
	r.PathPrefix("/swaggerui/").Handler(sh).Methods(http.MethodGet)

	srv := &http.Server{
		Addr:    "localhost:8080",
		Handler: r,
		// ... other code ...
	}
	fmt.Println("Paei na sikosei to swagger-ui server...")
	log.Fatal(srv.ListenAndServe())
}